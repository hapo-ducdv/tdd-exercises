$usersJobChangeLogs = [
            [
                'user_id' => 4,
                'status_id' => User::WORK_STATUS_INTERNSHIP,
                'start_date' => '2021-02-01',
                'end_date' => null,
                'created_by' => 1,
            ],
            [
                'user_id' => 5,
                'status_id' => User::WORK_STATUS_INTERNSHIP,
                'start_date' => '2021-01-01',
                'end_date' => '2021-02-28',
                'created_by' => 1,
            ],
            [
                'user_id' => 5,
                'status_id' => User::WORK_STATUS_PART_TIME,
                'start_date' => '2021-03-01',
                'end_date' => null,
                'created_by' => 1,
            ],
            [
                'user_id' => 6,
                'status_id' => User::WORK_STATUS_OFFICIAL,
                'start_date' => '2021-01-01',
                'end_date' => null,
                'created_by' => 1,
            ],
            [
                'user_id' => 7,
                'status_id' => User::WORK_STATUS_OFFICIAL,
                'start_date' => '2021-01-01',
                'end_date' => null,
                'created_by' => 1,
            ],
            [
                'user_id' => 8,
                'status_id' => User::WORK_STATUS_PROBATION,
                'start_date' => '2021-02-15',
                'end_date' => '2021-03-15',
                'created_by' => 1,
            ],
            [
                'user_id' => 9,
                'status_id' => User::WORK_STATUS_OFFICIAL,
                'start_date' => '2021-01-01',
                'end_date' => null,
                'created_by' => 1,
            ],
            [
                'user_id' => 9,
                'status_id' => User::WORK_STATUS_OFFICIAL,
                'start_date' => '2021-01-01',
                'end_date' => null,
                'created_by' => 1,
            ],
            [
                'user_id' => 10,
                'status_id' => User::WORK_STATUS_PROBATION,
                'start_date' => '2021-02-01',
                'end_date' => null,
                'created_by' => 1,
            ],
            [
                'user_id' => 11,
                'status_id' => User::WORK_STATUS_PROBATION,
                'start_date' => '2021-02-01',
                'end_date' => null,
                'created_by' => 1,
            ],
        ];

        foreach ($usersJobChangeLogs as $data) {
            UsersJobChangeLog::factory()->create($data);
        }


public function definition()
    {
        $user = User::whereNull('role_id')->inRandomOrder()->firstOrFail();

        return [
            'created_by' => $user->id,
            'updated_by' => $user->id,
            'start_date' => new DateTime('first day of this month'),
            'end_date' => new DateTime('last day of this month'),
        ];
    }
   
    
    
$table->integer('number_working_day')->comment('Số giờ làm việc')->change();
$table->renameColumn('number_working_day', 'number_work_hours');



const handleSubmit = async(e) => {
    e.preventDefault();
    const isACBValues = [1, 2];
    const dateFormat = 'yyyy-mm';
    const isValidDate = moment(formInput['month'], dateFormat, true).isValid();
    !formInput['month'] ? setErrors(values => ({ ...values, month: validation.exportExcel.monthRequired })) : '';
    !isValidDate && formInput['month'] ? setErrors(values => ({ ...values, month: validation.exportExcel.monthDateFormat})) : '';
    !formInput['inACB'] ? setErrors(values => ({ ...values, inACB: validation.exportExcel.isACBRequired })) : '';
    formInput['inACB'] && !isACBValues.includes(parseInt(formInput['inACB'])) ? setErrors(values => ({ ...values, inACB: validation.exportExcel.isACBIn})) : '';
    if (formInput['month'] && isValidDate && formInput['inACB'] && isACBValues.includes(parseInt(formInput['inACB']))) {
      setErrors([]);
      dispatch(exportPayrollExcel(formInput));
    }
  }


import axios from '@/helper/axiosBase';
export const exportPayrollExcel = (value) => async () => {
    try {
        // await axios.get(`/payrolls/export?month=${value['month']}&inACB=${value['isACB']}`, {responseType: 'blob'})
        //     .then((response) => {
        //     console.log(response);
        //     const url = window.URL.createObjectURL(new Blob([response.data]));
        //     const link = document.createElement('a');
        //     link.href = url;
        //     link.setAttribute('download', 'excel.xlsx');
        //     document.body.appendChild(link);
        //     link.click();
        // });
        const response = await axios.get(`/payrolls/export?month=${value['month']}&inACB=${value['isACB']}`, {responseType: 'blob'})
        const url = window.URL.createObjectURL(new Blob([response.data]));
        const link = document.createElement('a');
        link.href = url;
        link.setAttribute('download', 'excel.xlsx');
        document.body.appendChild(link);
        link.click();
        //  link.remove();
    } catch (error) {
        return error;
    }
}


$user = User::whereNull('role_id')->inRandomOrder()->firstOrFail();

$startDate = $this->faker->randomElement([new DateTime('first day of last month'), new DateTime('first day of this month')]);
$endDate = Carbon::now()->month == Carbon::parse($startDate)->month ? new DateTime('last day of this month') : new DateTime('last day of last month');

'user_id' => $this->faker->unique()->numberBetween(1, User::count()),
Payroll::factory()->count(User::count())->create();

'bank_name' => $this->faker->randomElement(['ACB', 'Techcombannk', 'Vietcombank', 'TPbank', 'Agribank']),
'bank_branch' => $this->faker->streetName(),
'province_of_bank' => $this->faker->city(),
'bank_account_number' => $this->faker->isbn10(),

$api->get('payrolls/export', [PayrollController::class, 'export']);

'provinceOfBank' => $this->type == User::ROLE_RS_USER ? ['required', 'string', 'max:255'] : '',

$model = $this->model->join('users', 'users.id', 'payrolls.user_id')->whereNotNull('users.role_id');

        if ($request->query() && $request->yearMonth != null) {
            $time = Carbon::parse($request->yearMonth);
            $year = $time->year;
            $month = $time->month;
            $query = $model->whereMonth('start_date', $month)
                ->whereMonth('end_date', $month)
                ->whereYear('start_date', $year)
                ->whereYear('end_date', $year);
        } else {
            $time = Carbon::now();
            $currentDay = $time->day;
            $currentYear = $time->year;
            $currentMonth = $time->month;
            $previousMonth = $time->subMonth()->month;
            $query = $model->whereMonth('start_date', $currentDay <= self::CHECK_DAY ? $previousMonth : $currentMonth)
                ->whereMonth('end_date', $currentDay <= self::CHECK_DAY ? $previousMonth : $currentMonth)
                ->whereYear('start_date', $currentYear)
                ->whereYear('end_date', $currentYear);
        }

/**
     * @OA\Get(
     ** path="/payrolls/export",
     *   operationId="payrollExport",
     *   tags={"Payroll"},
     *   summary="Payroll Export",
     *
     *   @OA\Parameter(
     *      name="month",
     *      in="query",
     *      @OA\Schema(
     *           type="string"
     *      )
     *   ),
     *   @OA\Parameter(
     *      name="isACB",
     *      in="query",
     *      @OA\Schema(
     *           type="integer"
     *      )
     *   ),
     *
     *   @OA\Response(
     *      response=200,
     *       description="Success",
     *      @OA\MediaType(
     *           mediaType="application/json",
     *      )
     *   ),
     *   @OA\Response(
     *      response=401,
     *       description="Unauthenticated"
     *   ),
     *   @OA\Response(
     *      response=400,
     *      description="Bad Request"
     *   ),
     *   @OA\Response(
     *      response=404,
     *      description="not found"
     *   ),
     *   @OA\Response(
     *      response=403,
     *      description="Forbidden"
     *   ),
     *   security={
     *      {"bearerAuth": {}}
     *   }
     *)
     **/

'start_date' => $this->faker->randomElement([new DateTime('first day of last month'), new DateTime('first day of this month')]),
'end_date' => $this->faker->randomElement([new DateTime('last day of last month'), new DateTime('first day of this month')]),
            
