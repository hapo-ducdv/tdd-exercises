$api->get('payrolls/export', [PayrollController::class, 'export']);

'provinceOfBank' => $this->type == User::ROLE_RS_USER ? ['required', 'string', 'max:255'] : '',

$model = $this->model->join('users', 'users.id', 'payrolls.user_id')->whereNotNull('users.role_id');

        if ($request->query() && $request->yearMonth != null) {
            $time = Carbon::parse($request->yearMonth);
            $year = $time->year;
            $month = $time->month;
            $query = $model->whereMonth('start_date', $month)
                ->whereMonth('end_date', $month)
                ->whereYear('start_date', $year)
                ->whereYear('end_date', $year);
        } else {
            $time = Carbon::now();
            $currentDay = $time->day;
            $currentYear = $time->year;
            $currentMonth = $time->month;
            $previousMonth = $time->subMonth()->month;
            $query = $model->whereMonth('start_date', $currentDay <= self::CHECK_DAY ? $previousMonth : $currentMonth)
                ->whereMonth('end_date', $currentDay <= self::CHECK_DAY ? $previousMonth : $currentMonth)
                ->whereYear('start_date', $currentYear)
                ->whereYear('end_date', $currentYear);
        }

/**
     * @OA\Get(
     ** path="/payrolls/export",
     *   operationId="payrollExport",
     *   tags={"Payroll"},
     *   summary="Payroll Export",
     *
     *   @OA\Parameter(
     *      name="month",
     *      in="query",
     *      @OA\Schema(
     *           type="string"
     *      )
     *   ),
     *   @OA\Parameter(
     *      name="isACB",
     *      in="query",
     *      @OA\Schema(
     *           type="integer"
     *      )
     *   ),
     *
     *   @OA\Response(
     *      response=200,
     *       description="Success",
     *      @OA\MediaType(
     *           mediaType="application/json",
     *      )
     *   ),
     *   @OA\Response(
     *      response=401,
     *       description="Unauthenticated"
     *   ),
     *   @OA\Response(
     *      response=400,
     *      description="Bad Request"
     *   ),
     *   @OA\Response(
     *      response=404,
     *      description="not found"
     *   ),
     *   @OA\Response(
     *      response=403,
     *      description="Forbidden"
     *   ),
     *   security={
     *      {"bearerAuth": {}}
     *   }
     *)
     **/
